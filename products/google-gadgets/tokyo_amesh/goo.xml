<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="__MSG_title__"
               directory_title="__MSG_title__"
               title_url="__MSG_url__"
               height="200"
               scrolling="false"
               description="__MSG_description__"
               screenshot="http://webos-goodies.googlecode.com/svn/trunk/products/google-gadgets/tokyo_amesh/__MSG_screenshot__.jpg"
               thumbnail="http://webos-goodies.googlecode.com/svn/trunk/products/google-gadgets/tokyo_amesh/__MSG_thumbnail__.jpg"
               author="WebOS Goodies"
               author_email="support@webos-goodies.jp"
               author_affiliation="WebOS Goodies"
               author_location="Tokyo, Japan"
               author_link="http://webos-goodies.jp/">
    <Locale messages="http://webos-goodies.googlecode.com/svn/trunk/products/google-gadgets/tokyo_amesh/ALL_ALL.xml"/>
    <Locale lang="ja" messages="http://webos-goodies.googlecode.com/svn/trunk/products/google-gadgets/tokyo_amesh/ja_ALL.xml"/>
  </ModulePrefs>
  <UserPref name="mode" display_name="__MSG_area_selection__" datatype="enum" default_value="east">
    <EnumValue value="west" display_value="__MSG_area_west__"/>
    <EnumValue value="east" display_value="__MSG_area_east__"/>
    <EnumValue value="whole" display_value="__MSG_area_whole__"/>
  </UserPref>
  <Content type="html" view="home,profile">
<![CDATA[

<style type="text/css">
  #mod0buttons {
    position: absolute;
    top: 4px; right: 4px;
    overflow: visible;
    z-index: 10;
    font-size: 10px;
  }

  #mod0buttons a {
    display: block;
    float: right;
    color: black;
    text-decoration: none;
    padding: 2px 4px;
    margin: 0px 0px 0px 4px;
    border: solid 1px black;
    background-color: white;
    opacity: 0.5;
    filter: alpha(opacity=50);
  }

  #mod0buttons a:hover {
    opacity: 1.0;
    filter: alpha(opacity=100);
  }

  #mod0buttons a:visited,
  #mod0buttons a:active {
    color: black;
  }

  #mod0wrap {
    position: absolute;
    left: 0px; top: 0px; width: 100%; height: 100%;
    overflow: hidden;
  }

  #mod0basemap {
  }

  .mod0overwrap {
    position: absolute;
    top: 0px; left: 0px;
    border: none;
  }
</style>

<!--[if IE]>
<style type="text/css">
  #mod0wrap {
    position: static;
    width: 100%; height: 200px;
  }
</style>
<![endif]-->

<div id="mod0buttons">
  <a href="#" onclick="if(mod0app) mod0app.onClickWhole(); event.returnValue = false; return false;">__MSG_btn_whole__</a>
  <a href="#" onclick="if(mod0app) mod0app.onClickEast(); event.returnValue = false; return false;">__MSG_btn_east__</a>
  <a href="#" onclick="if(mod0app) mod0app.onClickWest(); event.returnValue = false; return false;">__MSG_btn_west__</a>
</div>

<div id="mod0wrap"></div>

<script type="text/javascript">

var _window = window, _document = document;

function normalizeCallback(callback) {
  var scope = _window, method = callback;
  if(arguments.length >= 2)
	callback = arguments;
  if(typeof callback != 'function') {
	if(!(method = callback[1] || callback['method'])) {
	  method = callback[0];
	} else {
	  scope = callback[0] || callback['scope'];
	  if(typeof method != 'function')
		method = scope[method];
	}
  }
  return [scope, method];
}

function delegate() {
  var callback = normalizeCallback.apply(this, arguments);
  return function() { callback[1].apply(callback[0], arguments); }
}

function addEvent(element, type) {
  var listener = delegate(Array.prototype.slice.call(arguments, 2));
  element['addEventListener'] ?
    element.addEventListener(type, listener, false) :
    element.attachEvent('on' + type, listener);
}

function stopEvent(event) {
  event = event || window.event;
  event.stopPropagation && event.stopPropagation();
  event.preventDefault  && event.preventDefault();
  event.cancelBubble = true;
  event.returnValue  = false;
}

function mod0Application()
{
  var self = this;
  this.prefs = new _IG_Prefs(0);
  this.images = [];
  this.rainImages = null;
  this.dragInfo = null;
  this.mode = this.prefs.getString('mode');

  this.images[0] = document.createElement('IMG');
  this.images[0].className = 'mod0basemap';
  this.images[0].style.zIndex = 0;
  this.images[0].width  = this.mapWidth;
  this.images[0].height = this.mapHeight;
  this.images[0].onload = function() { self.changeMode(self.mode); };
  this.images[0].src    = _IG_GetImageUrl('http://tokyo-ame.jwa.or.jp/map/map000.jpg');

  this.images[1] = document.createElement('IMG');
  this.images[1].className = 'mod0overwrap';
  this.images[1].style.zIndex = 2;
  this.images[1].width  = this.mapWidth;
  this.images[1].height = this.mapHeight;

  this.images[2] = document.createElement('IMG');
  this.images[2].className = 'mod0overwrap';
  this.images[2].style.zIndex = 2;
  this.images[2].width  = this.mapWidth;
  this.images[2].height = this.mapHeight;
  this.images[2].src    = _IG_GetImageUrl('http://tokyo-ame.jwa.or.jp/map/msk000.png');

  var root = _gel('mod0wrap');
  for(var i = 0 ; i < this.images.length ; ++i)
  {
    root.appendChild(this.images[i]);
  }
  root = null;
  addEvent(root,      'mousedown', self, self.onMouseDown);
  addEvent(_document, 'mouseup',   self, self.onMouseUp);
  addEvent(_document, 'mousemove', self, self.onMouseMove);

  _IG_FetchContent('http://tokyo-ame.jwa.or.jp/scripts/mesh_index.js', function(content) {
    self.initRainImage(content);
  }, {refreshInterval: 60*5 });

}

mod0Application.prototype = {

  mapWidth:  771,
  mapHeight: 480,

  initRainImage : function(content)
  {
    var match = /\(\[(\"\d+\",?)+\]\)/.exec(content);
    if(match)
    {
      this.rainImages = eval(match[0]);
      this.images[1].src = _IG_GetImageUrl('http://tokyo-ame.jwa.or.jp/mesh/000/' + this.rainImages[0] + '.gif');
    }
  },

  scroll : function(x, y)
  {
    var el = _gel('mod0wrap');
    var pr = [ { value: x, range: this.mapWidth,  view: el.clientWidth },
               { value: y, range: this.mapHeight, view: el.clientHeight }];
    for(var i = 0 ; i < pr.length ; ++i)
    {
      if(pr[i].value <= 0 || pr[i].range <= pr[i].view)
      {
        pr[i].value = 0;
      }
      else
      {
        var max = pr[i].range - pr[i].view;
        if(pr[i].value > max)
          pr[i].value = max;
      }
    }
    el.scrollLeft = pr[0].value;
    el.scrollTop  = pr[1].value;
  },

  changeMode : function(mode)
  {
    this.mode = mode;

    var wrapEl = _gel('mod0wrap');
    var width, height, scrollX, scrollY;
    switch(this.mode)
    {
    case 'west':
      width   = this.mapWidth  + 'px';
      height  = this.mapHeight + 'px';
      scrollX = 280 - wrapEl.clientWidth  / 2;
      scrollY = 220 - wrapEl.clientHeight / 2;
      break;
    case 'east':
      width   = this.mapWidth  + 'px';
      height  = this.mapHeight + 'px';
      scrollX = 450 - wrapEl.clientWidth  / 2;
      scrollY = 240 - wrapEl.clientHeight / 2;
      break;
    case 'whole':
      width   = '100%';
      height  = '100%';
      scrollX = 0;
      scrollY = 0;
      break;
    }

    var images = this.images;
    for(var i = 0 ; i < images.length ; ++i)
    {
      images[i].style.width  = width;
      images[i].style.height = height;
    }
    this.scroll(scrollX, scrollY);
  },

  onMouseDown : function(event)
  {
    event = event || window.event;
    stopEvent(event);
    var wrap = _gel('mod0wrap');
    this.dragInfo = {
      startX: event.clientX,
      startY: event.clientY,
      baseX: wrap.scrollLeft,
      baseY: wrap.scrollTop
    };
  },

  onMouseUp : function(event)
  {
    event = event || window.event;
    stopEvent(event);
    this.dragInfo = null;
  },

  onMouseMove : function(event)
  {
    event = event || window.event;
    stopEvent(event);
    var info = this.dragInfo;
    if(info)
    {
      this.scroll(info.baseX - (event.clientX - info.startX),
                  info.baseY - (event.clientY - info.startY));
    }
  },

  onClickWest : function(mode)
  {
    this.changeMode('west');
  },

  onClickEast : function(mode)
  {
    this.changeMode('east');
  },

  onClickWhole : function()
  {
    this.changeMode('whole');
  }

};

var mod0app = new mod0Application();

</script>

]]>
  </Content>
</Module>
